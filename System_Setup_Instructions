System Requirements

Linux - Ubuntu 16
Architecture - 64

QTt 5.9.4

-----------------
Install QT
-----------------

Download QT community version for Linux(64-bit) : https://www.qt.io/download

Make the installer executable and run:
  > chmod +x qt-unified-linux-x64-3.0.4-online.run
  > ./qt-unified-linux-x64-3.0.4-online.run

You don't need to have an account, skip.
On the "Select Components" page check "Qt Creator" and "Qt 5.9.4"
Install

Sense-Able Prototype:

WARNING!  THE BINARY WILL NOT RUN WITHOUT INSTALLING THE SYSTEM
          REQUIREMENTS OUTLINED BELOW!  PLEASE INSTALL THESE
          REQUIREMENTS!
	  
	  For assistance, please email Jonathan Senn at js5@email.sc.edu.

________________________
CONTENTS
________________________
1. SYSTEM REQUIREMENTS
2. BUILDING AND RUNNING
3. TESTING

________________________
1. SYSTEM REQUIREMENTS
________________________

  Make sure your system has all recent updates!
    sudo apt-get update

  opencv + contrib modules 
    Install Tutorial: 
    https://docs.opencv.org/trunk/d7/d9f/tutorial_linux_install.html:
      
      [compiler] sudo apt-get install build-essential
      [required] sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev
      [optional] sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev

      Download the latest OpenCV 3 release:
        https://opencv.org/releases.html

      cd ~/opencv
      mkdir build
      cd build
      cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..

      make -j7 # runs 7 jobs in parallel

      sudo make install

  
  Note: This is a big install!

  qt5
    Install Tutorial:
    https://wiki.qt.io/Install_Qt_5_on_ubuntu
    sudo apt-get install qtmultimedia5-dev libqt5serialport5-dev
  
  libusb
    Using apt-get on Ubuntu:
    sudo apt-get install libusb-1.0-0-dev
  
  libxml2
    Using apt-get on Ubuntu:
    sudo apt-get install libxml2
  
  gcc 4.8
    sudo apt-get install gcc

________________________
2. BUILDING AND RUNNING
________________________
  
  In Sense-Able/build-leddargui-Desktop-Release/
    Run the following in bash:
    
    make
    ./leddargui

Make sure, of course, that the 'leddargui' binary isn't already
in the directory.  If you cloned this repository, 'leddargui' will
already be built.  Just remove it and rebuild if you prefer.

________________________
3. TESTING
________________________
In order to run tests, just run the ./leddargui executable in the
build-leddargui-Desktop-Debug/ debug directory.

We give an overview of how one should make their own tests:

_________________
UNIT TESTING:
_________________
We use the googletest testing framework.

In order to test a function, use the following template (within the
unittestsuite.cpp file):

TEST (TestCase, TestName) {
	EXPECT_EQ(expected_value, function(args...))
}
_________________
BEHAVIOR TESTING:
_________________
We use the QTest testing framework to simulate clicks and keypresses
on the gui.

In order to test a behavior, use the following template (within the
QtBehaviorTestSuite.cpp file):

void QtBehaviorTestSuite::testName() {
	MainWindow window;
	
	QSignalSpy spy(&window, SIGNAL(nameOfSignalToTest()));
	QWidget widget = window.findChild<WidgetType>("name of widget");
	
	// Simulate use of the widget here
	
	// We should make this a separate function; less typing:
	cout << "testStreamButtonClicked:  ";
    if (spy.count() == 1) {
        cout << "SUCCESS";
    } else {
        cout << "FAILURE";
    }
    cout << endl;

}

This function sets up a spy to track whether the given signal emits.
We then get the widget on the screen to do something to, and simulate
that widget (i.e. do a keypress or a mouse click, etc.).  See the
QTest documentation on how to simulate a widget.  Finally, we output
whether the simulation was actually performed ("SUCCESS") or not
("FAILURE").
